<?php

namespace AgriBundle\Repository;
use AgriBundle\Entity\Intervention;
use AgriBundle\Entity\InterventionParcelle;
use \DateTime;


/**
 * InterventionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InterventionRepository extends \Doctrine\ORM\EntityRepository
{
    function add($type, $date, $parcelles){
        $em = $this->getEntityManager();
        $intervention = new Intervention();
        $intervention->type = $type;
        $intervention->date = new Datetime($date);
        $em->persist($intervention);
        foreach($parcelles as $p){
            $it = new InterventionParcelle();
            $it->intervention = $intervention;
            $it->parcelle = $p;
            $em->persist($it);
            //$intervention->parcelles[] = $it;
        }
        $em->flush();
        return $intervention;
    }

    function delete($intervention_id){
        $em = $this->getEntityManager();
        $intervention = $em->getRepository('AgriBundle:Intervention')->findOneById($intervention_id);
        $intervention_parcelles = $em->getRepository('AgriBundle:InterventionParcelle')
                                   ->findBy(array('intervention'=>$intervention));
        $intervention_produits = $em->getRepository('AgriBundle:InterventionProduit')
                                   ->findBy(array('intervention'=>$intervention));
        foreach ($intervention_produits as $it) {
            $em->remove($it);
            $em->getRepository('AgriBundle:Produit')->update($it->produit);
        }
        foreach ($intervention_parcelles as $it) {
            $em->remove($it);
        }
        $em->remove($intervention);
        $em->flush();
    }

    function getAllForCampagne($campagne){
        $query = $this->createQueryBuilder('p')
            ->where('p.campagne = :campagne')
            ->setParameter('campagne', $campagne)
            ->getQuery();

        return $query->getResult();
    }

    function getAllForParcelle($parcelle){
        $em = $this->getEntityManager();
        $sql = 'SELECT intervention_id FROM intervention_parcelle where parcelle_id = ?';

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare($sql);
        $statement->bindValue(1, $parcelle->id);
        $statement->execute();
        $parcelles = $statement->fetchAll();
        $ids = [];
        foreach($parcelles as $p){
            $ids[] = $p["intervention_id"];

        }

        return $this->findById($ids);
    }
}
