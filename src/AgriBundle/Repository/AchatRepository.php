<?php

namespace AgriBundle\Repository;
use AgriBundle\Entity\Achat;

/**
 * AchatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AchatRepository extends \Doctrine\ORM\EntityRepository
{
    function save($achat, $campagne){
        $em = $this->getEntityManager();
        $produit = $em->getRepository('AgriBundle:Produit')->findOrCreate($achat->name, $campagne);
        $achat->produit = $produit;
        $achat->campagne = $campagne;
        $achat->price = $achat->price_total/$achat->qty;
        $em->persist($achat);
        $em->flush();
        $em->getRepository('AgriBundle:Produit')->update($produit);
    }

    function addCaj($achat, $campagne){
        $em = $this->getEntityManager();

        if(!empty($achat->externId)){
            $achats = $em->getRepository('AgriBundle:Achat')->findByExternId($achat->externId);
            foreach($achats as $a){
                $em->remove($a);
                $em->flush();
            }
        }

        $produit = $em->getRepository('AgriBundle:Produit')->findOrCreateCaj($achat->name, $achat->type, $achat->unity, $campagne);
        $achat->produit = $produit;
        $achat->campagne = $campagne;
        $em->persist($achat);
        $em->flush();
        $em->getRepository('AgriBundle:Produit')->update($produit);
    }

    function saveCAJData($data, $campagne){
        $lines = explode(PHP_EOL, $data);
        print ("tutu");
        foreach ($lines as $line) {
            $rows = preg_split('/[\t]/', $line);
            print_r($rows);
            $achat = new Achat();
            $achat->externId = trim($rows[0]);
            $achat->comment = $line;
            $date = trim($rows[1]);
            $achat->date = date_create_from_format('d/m/Y',$date);
            $name = trim($rows[2]);
            $name = str_replace(" pdr","",$name);
            $achat->name = $name;
            $achat->type = trim($rows[3]);
            $achat->qty = floatval(str_replace(",",".",trim($rows[4])));
            $achat->unity = trim($rows[5]);
            $achat->price = floatval(str_replace(",",".",trim($rows[6])));
            $achat->price_total = floatval(str_replace(",",".",trim($rows[7])));
            $this->addCaj($achat, $campagne);
            //print_r($achat);
        }

    }

    function addRows($rows, $campagne){
        print(json_encode($rows));
        $achat = new Achat();
        $achat->comment = json_encode($rows);
        $date = $rows[1];
        $date = str_replace("/20/","/02/",$date);
        $date = str_replace("/30/","/03/",$date);
        $date = str_replace("/40/","/04/",$date);
        $date = str_replace("/50/","/05/",$date);
        $date = str_replace("/60/","/06/",$date);
        $date = str_replace("/70/","/07/",$date);
        $date = str_replace("/80/","/08/",$date);
        $date = str_replace("/90/","/09/",$date);
        $achat->date = date_create_from_format('d/m/Y',$date);
        $name = $rows[2];
        $name = str_replace(" pdr","",$name);
        $achat->name = $name;
        $achat->type = $rows[3];
        $achat->qty = floatval(str_replace(",",".",$rows[4]));
        $achat->unity = $rows[5];
        $achat->price = floatval(str_replace(",",".",$rows[6]));
        $achat->price_total = floatval(str_replace(",",".",$rows[7]));
        $this->addCaj($achat, $campagne);
    }

    function addCajCsv($fileName){
        $em = $this->getEntityManager();
        $campagne = $em->getRepository('AgriBundle:Campagne')->findOneById("f49d37d6-3951-11e7-92c4-80e65014bb7c");

        $achats = $this->findByCampagne($campagne);
        foreach ($achats as $achat) {
            $em->remove($achat);
        }
        $em->flush();

        if (($handle = fopen($fileName, "r")) !== FALSE) {
            $i = 0;
            while (($rows = fgetcsv($handle, null, ";")) !== FALSE) {
                //if ($i == 0) { $i = 1;continue; }
                $this->addRows($rows, $campagne);
            }
        }
    }

    function getAllForProduit($produit){
        $query = $this->createQueryBuilder('p')
            ->where('p.produit = :produit')
            ->setParameter('produit', $produit)
            ->orderBy('p.date', 'DESC')
            ->getQuery();

        return $query->getResult();
    }
}
