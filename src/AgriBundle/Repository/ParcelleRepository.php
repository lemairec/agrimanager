<?php

namespace AgriBundle\Repository;
use AgriBundle\Entity\Parcelle;

/**
 * ParcelleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParcelleRepository extends \Doctrine\ORM\EntityRepository
{
    function save($parcelle){
        $em = $this->getEntityManager();
        if($parcelle->ilot){
            $parcelle->completeName = $parcelle->getIlotName()." - ";
        } else {
            $parcelle->completeName = "";
        }
        $parcelle->completeName = $parcelle->completeName.$parcelle->getCultureName();
        if($parcelle->name){
            $parcelle->completeName = $parcelle->completeName." - ".$parcelle->name;
        }
        $em->persist($parcelle);
        $em->flush();
        return $parcelle;

    }

    function getAllForCampagne($campagne){
        $query = $this->createQueryBuilder('p')
            ->where('p.campagne = :campagne')
            ->leftJoin('p.ilot', 'i')
            ->setParameter('campagne', $campagne)
            ->addorderBy('p.active', 'DESC')
            ->addorderBy('i.surface', 'DESC')
            ->addorderBy('p.surface', 'DESC')
            ->getQuery();

        return $query->getResult();
    }

    function getAllForCampagneWithoutActive($campagne){
        $query = $this->createQueryBuilder('p')
            ->where('p.campagne = :campagne')
            ->andWhere('p.active = true')
            ->leftJoin('p.ilot', 'i')
            ->setParameter('campagne', $campagne)
            ->add('orderBy','p.culture DESC, p.ilot ASC')
            ->getQuery();

        return $query->getResult();
    }


    function delete($parcelle_id){
        $em = $this->getEntityManager();
        $parcelle = $this->findOneById($parcelle_id);
        $em->remove($parcelle);
        $em->flush();
    }
}
