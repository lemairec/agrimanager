<?php

namespace AgriBundle\Repository;
use AgriBundle\Entity\EphyProduit;
use AgriBundle\Entity\EphySubstance;
use AgriBundle\Entity\EphySubstanceProduit;
use EphyBundle\Entity\EphyCommercialName;

/**
 * EphyProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EphyProduitRepository extends \Doctrine\ORM\EntityRepository
{
    /*function addRows($rows){
        $ephyproduit = new EphyProduit();
        $ephyproduit->amm = $rows[1];
        $ephyproduit->name = $rows[2];
        $ephyproduit->completeName = $ephyproduit->amm . ' - ' . $ephyproduit->name;
        $produitbdd = $this->findOneByCompleteName($ephyproduit->completeName);
        if($produitbdd == null){
            print(json_encode($rows)."\n");
            $em = $this->getEntityManager();
            $ephyproduit->society = $rows[4];
            $ephyproduit->unity = $rows[16];
            $em->persist($ephyproduit);
            $em->flush();
            if(strlen($rows[8])>10){
                $substances = explode(" | ", $rows[8]);
                foreach($substances as $s){
                    $pos1 = strpos($s, "(");
                    $pos2 = strpos($s, ")");
                    $name2 = substr($s, 0, $pos1-1);
                    $name = substr($s, $pos1+1, $pos2-$pos1-1);
                    $quantity = substr($s, $pos2+1);
                    $ephysubstance = $this->getEphySubstance($name);
                    $ephysubstanceproduit = new EphySubstanceProduit();
                    $ephysubstanceproduit->ephyproduit = $ephyproduit;
                    $ephysubstanceproduit->ephysubstance = $ephysubstance;
                    $ephysubstanceproduit->quantity = $quantity;
                    $ephysubstanceproduit->name2 = $name2;
                    $em->persist($ephysubstanceproduit);
                    $em->flush();
                }
            }




        } else {
        }
        return $ephyproduit;
    }*/

    function getEphySubstance($id, $name){
        $em = $this->getEntityManager();
        $ephysubstancerepository = $em->getRepository('AgriBundle:EphySubstance');
        $ephysubstance = $ephysubstancerepository->findOneById($id);
        if($ephysubstance){
            return $ephysubstance;
        }
        $ephysubstance = new EphySubstance();
        $ephysubstance->id = $id;
        $ephysubstance->name = $name;
        $em->persist($ephysubstance);
        $em->flush();
        return $ephysubstance;
    }

    function delete(){
        $em = $this->getEntityManager();
        $em->createQuery('DELETE FROM AgriBundle:EphySubstanceProduit')->execute();
        $em->createQuery('DELETE FROM AgriBundle:EphySubstance')->execute();
        $em->createQuery('DELETE FROM EphyBundle:EphyCommercialName')->execute();
        $em->createQuery('DELETE FROM AgriBundle:EphyProduit')->execute();
    }

    function xml(){
        $directory = "/Users/lemairec/fablab/symfony_agri/decisionAMM_intrant_format_xml/";
        $files = ["decision_intrant_20170529_1496059873117.xml", "decision_intrant_20170529_1496061171121.xml", "decision_intrant_20170529_1496062364257.xml",
        "decision_intrant_20170529_1496063425675.xml", "decision_intrant_20170529_1496060207007.xml", "decision_intrant_20170529_1496061478517.xml",
        "decision_intrant_20170529_1496062621835.xml", "decision_intrant_20170529_1496063698899.xml", "decision_intrant_20170529_1496060536890.xml",
        "decision_intrant_20170529_1496061766697.xml", "decision_intrant_20170529_1496062884410.xml", "decision_intrant_20170529_1496063964369.xml",
        "decision_intrant_20170529_1496060865806.xml", "decision_intrant_20170529_1496062063393.xml", "decision_intrant_20170529_1496063152698.xml"];
        $this->delete();
        foreach($files as $file){
            $this->xml_file($directory.$file);
        }
    }

    function xml_file($file){
        print("xml_file ".$file."\n");
        $em = $this->getEntityManager();
        $xml = simplexml_load_file($file);
        $ppps = $xml->{'intrants'}->{'PPPs'};
        $ephyCommercialNameRepository = $em->getRepository('EphyBundle:EphyCommercialName');
        foreach ($ppps->children() as $ppp) {
            //print_r($ppp);
            if($ppp->{'etat-produit'} != "AUTORISE"){
                continue;
            }
            $em = $this->getEntityManager();
            $ephyproduit = new EphyProduit();
            $ephyproduit->amm = $ppp->{'numero-AMM'};
            $ephyproduit->name = $ppp->{'nom-produit'};
            $ephyproduit->society = $ppp->{'titulaire'};


            if(isset($ppp->{'composition-integrale'}->{'substances-actives'})) {
                foreach ($ppp->{'composition-integrale'}->{'substances-actives'}->children() as $substance) {
                    if(isset($substance->{'teneur-SA-pure'})){
                        $ephysubstanceproduitunity = $substance->{'teneur-SA-pure'}->attributes()['unite'];
                        $i = strpos($ephysubstanceproduitunity, '/');
                        if($i !== false){
                            $ephyproduit->unity = substr($ephysubstanceproduitunity, $i+1);
                        }
                    }
                }
            }

            $ephyproduit->completeName = $ephyproduit->amm . ' - ' . $ephyproduit->name . ' ('. $ephyproduit->unity.')';
            $produitbdd = $this->findOneByCompleteName($ephyproduit->completeName);
            if($produitbdd != null){
                print("error ".$ephyproduit->completeName."\n");
                continue;
            }
            $em->persist($ephyproduit);
            $em->flush();

            if(isset($ppp->{'composition-integrale'}->{'substances-actives'})) {
                foreach ($ppp->{'composition-integrale'}->{'substances-actives'}->children() as $substance) {
                    //print_r($substance);
                    $substance_name = $substance->{'substance'};
                    $substance_id = $substance->{'substance'}->attributes()['ref-id'];
                    $ephysubstance = $this->getEphySubstance($substance_id, $substance_name);
                    $ephysubstanceproduit = new EphySubstanceProduit();
                    $ephysubstanceproduit->ephyproduit = $ephyproduit;
                    $ephysubstanceproduit->ephysubstance = $ephysubstance;
                    if(isset($substance->{'teneur-SA-pure'})){
                        $ephysubstanceproduit->quantity = $substance->{'teneur-SA-pure'};
                        $ephysubstanceproduit->unity = $substance->{'teneur-SA-pure'}->attributes()['unite'];
                    } else {
                        $ephysubstanceproduit->quantity = 0;
                        $ephysubstanceproduit->unity = 'NA';
                    }
                    $em->persist($ephysubstanceproduit);
                }
            }

            if(isset($ppp->{'autres-noms'})) {
                foreach ($ppp->{'autres-noms'}->children() as $autreNom) {
                    $name = $autreNom->{'nom'};
                    $ephyCommercialName = new EphyCommercialName();
                    $ephyCommercialName->name = $name;
                    $ephyCommercialName->ephyproduit = $ephyproduit;
                    $ephyCommercialName->completeName = $ephyproduit->amm . ' - ' . $name . ' ('. $ephyproduit->unity.')';
                    $ephyCommercialNameRepository->save($ephyCommercialName);
                }
            }
            $em->flush();

        }

    }

    function csv(){
        $em = $this->getEntityManager();
        $ephyrepository = $em->getRepository('AgriBundle:EphyProduit');
        $fileName = '/Users/lemairec/fablab/symfony_agri/data/usages_des_produits_autorises_v2_utf8_04052017.csv';
        if (($handle = fopen($fileName, "r")) !== FALSE) {
            echo("toto");
            $i = -1;
            $this->delete();
            while (($rows = fgetcsv($handle, null, ";")) !== FALSE) {
                $i += 1;
                if ($i == 0) { continue; }
                $ephyrepository->addRows($rows);
                //if($i > 1000){ return; };
            }
        }
    }
}
