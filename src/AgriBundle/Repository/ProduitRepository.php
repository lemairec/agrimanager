<?php

namespace AgriBundle\Repository;
use AgriBundle\Entity\Produit;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends \Doctrine\ORM\EntityRepository
{
    function findOrCreate($completeName, $campagne){
        $em = $this->getEntityManager();

        $produit = $this->findOneByCompleteName($completeName);
        if($produit){
            return $produit;
        }
        $produit = new Produit();
        $produit->campagne = $campagne;
        $produit->company = $campagne->company;
        $produit->name = $completeName;
        $produit->completeName = $completeName;
        $ephy = $em->getRepository('EphyBundle:EphyProduit')->findOneByCompleteName($completeName);
        if($ephy){
            $produit->type = "ppp";
            $produit->unity = $ephy->unity;
            $produit->name = $ephy->amm.' - '.$ephy->name;
        } else {
            $produit->type = "autre";
        }
        $produit->ephyProduit = $ephy;
        $em->persist($produit);
        $em->flush();
        return $produit;
    }

    function findOrCreateCaj($name, $type, $unity,   $campagne){
        $em = $this->getEntityManager();
        $produit = $this->createQueryBuilder('p')
            ->where('p.name = :name')
            ->andWhere('p.unity = :unity')
            ->setParameter('name', $name)
            ->setParameter('unity', $unity)
            ->getQuery()->getOneOrNullResult();;
        if($produit){
            $produit->type = $type;
            $this->save($produit);
            return $produit;
        }
        $produit = new Produit();
        $produit->campagne = $campagne;
        $produit->company = $campagne->company;
        $produit->name = $name;
        $produit->type = $type;
        $produit->unity = $unity;
        $ephy = $em->getRepository('EphyBundle:EphyProduit')->findOneByCompleteName($name);
        /*if($ephy){
            $produit->type = "ppp";
        } else {
            $produit->type = "autre";
        }*/
        $produit->ephyProduit = $ephy;
        $this->save($produit);
        return $produit;
    }

    function update($produit){
        $em = $this->getEntityManager();

        $em->getRepository('AgriBundle:ProduitCampagne')->update($produit);
        $ps = $em->getRepository('AgriBundle:ProduitCampagne')->findByProduit($produit);
        $stock = 0;
        $price = 0;
        $nb = 0;
        foreach($ps as $p){
            $stock += $p->stock;
            $price += $p->price;
            $nb += 1;
        }
        $produit->qty = $stock;
        if($nb > 0){
            $produit->price = $price/$nb;
        }

        $this->save($produit);
    }

    function save($produit){
        $produit->completeName = $produit->name . ' (' . $produit->unity.')';
        $em = $this->getEntityManager();
        $em->persist($produit);
        $em->flush();
        return $produit;
    }

    function getAllName($campagne){
        $em = $this->getEntityManager();
        $res = [];
        $produits = $this->findByCampagne($campagne);
        foreach($produits as $p){
            $res[] = $p->completeName;
        }
        $produits = $em->getRepository('EphyBundle:EphyProduit')->findAll();
        foreach($produits as $p){
            $res[] = $p->completeName;
        }

        return  array_unique($res);
    }

    function delete($produit_id){
        $em = $this->getEntityManager();
        $produit = $this->findOneById($produit_id);
        $ps = $em->getRepository('EphyBundle:ProduitCampagne')->findByProduit($produit);
        foreach($ps as $p){
            $em->remove($p);
        }
        $em->remove($produit);
        $em->flush();
    }

    public function findByCampagne($campagne){
        return $this->getAllForCompany($campagne->company);
    }

    public function getAllForCompany($company){
        return $this->createQueryBuilder('p')
            ->where('p.company = :company')
            ->addorderBy('p.type', 'ASC')
            ->addorderBy('p.name', 'ASC')
            ->setParameter('company', $company)
            ->getQuery()->getResult();
    }

    public function getAllEngraisForCompany($company){
        return $this->createQueryBuilder('p')
            ->where('p.company = :company')
            ->Andwhere('p.n != 0 or p.k != 0 or p.p != 0')
            ->addorderBy('p.type', 'ASC')
            ->addorderBy('p.name', 'ASC')
            ->setParameter('company', $company)
            ->getQuery()->getResult();
    }

    public function getAllForCompanyStock($company){
        return $this->createQueryBuilder('p')
        ->where('p.company = :company')
        ->andWhere('ABS(p.qty) > 0.001')
        ->addorderBy('p.type', 'ASC')
        ->addorderBy('p.name', 'ASC')
        ->setParameter('company', $company)
        ->getQuery()->getResult();
    }

}
