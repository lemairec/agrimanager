<?php

namespace AgriBundle\Repository;
use AgriBundle\Entity\Produit;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends \Doctrine\ORM\EntityRepository
{
    function findOrCreate($completeName, $campagne){
        $em = $this->getEntityManager();

        $produit = $this->findOneByCompleteName($completeName);
        if($produit){
            return $produit;
        }
        $produit = new Produit();
        $produit->campagne = $campagne;
        $produit->name = $completeName;
        $produit->completeName = $completeName;
        $ephy = $em->getRepository('AgriBundle:EphyProduit')->findOneByCompleteName($completeName);
        if($ephy){
            $produit->type = "ppp";
            $produit->unity = $ephy->unity;
            $produit->name = $ephy->amm.' - '.$ephy->name;
        } else {
            $produit->type = "autre";
        }
        $produit->ephyProduit = $ephy;
        $em->persist($produit);
        $em->flush();
        return $produit;
    }

    function findOrCreateCaj($name, $type, $unity,   $campagne){
        $em = $this->getEntityManager();
        $produit = $this->createQueryBuilder('p')
            ->where('p.name = :name')
            ->andWhere('p.unity = :unity')
            ->setParameter('name', $name)
            ->setParameter('unity', $unity)
            ->getQuery()->getOneOrNullResult();;
        if($produit){
            return $produit;
        }
        $produit = new Produit();
        $produit->campagne = $campagne;
        $produit->name = $name;
        $produit->type = $type;
        $produit->unity = $unity;
        $ephy = $em->getRepository('AgriBundle:EphyProduit')->findOneByCompleteName($name);
        if($ephy){
            $produit->type = "ppp";
        } else {
            $produit->type = "autre";
        }
        $produit->ephyProduit = $ephy;
        $this->save($produit);
        return $produit;
    }

    function update($produit){
        $em = $this->getEntityManager();
        $qty = $em->getRepository('AgriBundle:Achat')->createQueryBuilder('a')
            ->select('SUM(a.qty)')
            ->where('a.produit = :produit')
            ->setParameter('produit', $produit)
            ->getQuery()
            ->getSingleScalarResult();
        $qty2 = $em->getRepository('AgriBundle:InterventionProduit')->createQueryBuilder('a')
            ->select('SUM(a.qty)')
            ->where('a.produit = :produit')
            ->setParameter('produit', $produit)
            ->getQuery()
            ->getSingleScalarResult();
        $price = $em->getRepository('AgriBundle:Achat')->createQueryBuilder('a')
            ->select('MAX(a.price)')
            ->where('a.produit = :produit')
            ->setParameter('produit', $produit)
            ->getQuery()
            ->getSingleScalarResult();
        $produit->qty = $qty - $qty2;
        if($price > 0){
            $produit->price = $price;
        }
        $this->save($produit);
    }

    function save($produit){
        $produit->completeName = $produit->name . ' (' . $produit->unity.')';
        $em = $this->getEntityManager();
        $em->persist($produit);
        $em->flush();
        return $produit;
    }

    function getAllName($campagne){
        $em = $this->getEntityManager();
        $res = [];
        $produits = $this->findByCampagne($campagne);
        foreach($produits as $p){
            $res[] = $p->completeName;
        }
        $produits = $em->getRepository('AgriBundle:EphyProduit')->findAll();
        foreach($produits as $p){
            $res[] = $p->completeName;
        }

        return  array_unique($res);
    }

    function delete($produit_id){
        $em = $this->getEntityManager();
        $produit = $this->findOneById($produit_id);
        $em->remove($produit);
        $em->flush();
    }
}
