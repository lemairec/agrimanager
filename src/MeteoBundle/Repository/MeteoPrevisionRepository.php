<?php

namespace MeteoBundle\Repository;
use MeteoBundle\Entity\MeteoPrevision;

use Datetime;

/**
 * MeteoPrevisionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MeteoPrevisionRepository extends \Doctrine\ORM\EntityRepository
{
    function getLast($city){
        return $this->createQueryBuilder('p')
            ->orderBy('p.date')
            ->setMaxResults(1)->getQuery()->getOneOrNullResult();
    }

    function save($meteo_prevision){
        $meteo2 =  $this->createQueryBuilder('p')
            ->where('p.date_utc = :date_utc')
            ->andWhere('p.city = :city')
            ->andWhere('p.source = :source')
            ->setParameter('date_utc', $meteo_prevision->date_utc)
            ->setParameter('city', $meteo_prevision->city)
            ->setParameter('source', $meteo_prevision->source)
            ->getQuery()->getOneOrNullResult();
        if($meteo2 != null){
            print("error ".$meteo2->city."\n");
            return;
        }
        $meteo_prevision->update = new Datetime();
        $em = $this->getEntityManager();
        $em->persist($meteo_prevision);
        $em->flush();
    }

    function save_data_json($data_json, $city, $source){
        $data = json_decode($data_json);
        $last_data = $data->list[0];

        $meteo_prevision = new MeteoPrevision();
        $meteo_prevision->city = $city;
        $meteo_prevision->source = $source;
        $meteo_prevision->date_utc = DateTime::createFromFormat("Y-m-d H:i:s",$last_data->dt_txt);
        $meteo_prevision->value = $data_json;
        $meteo_prevision->date_update_utc = new DateTime('now Europe/Paris');

        $this->save($meteo_prevision);

    }
}
