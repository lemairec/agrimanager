<?php

namespace App\Repository;
use App\Entity\Intervention;
use App\Entity\InterventionParcelle;
use \DateTime;


/**
 * InterventionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InterventionRepository extends \Doctrine\ORM\EntityRepository
{
    function delete($intervention_id){
        $em = $this->getEntityManager();
        $intervention = $em->getRepository('App:Intervention')->findOneById($intervention_id);
        $intervention_parcelles = $em->getRepository('App:InterventionParcelle')
                                   ->findBy(array('intervention'=>$intervention));
        $intervention_produits = $em->getRepository('App:InterventionProduit')
                                   ->findBy(array('intervention'=>$intervention));
        foreach ($intervention_produits as $it) {
            $em->getRepository('App:InterventionProduit')->delete($it->id);
        }
        foreach ($intervention_parcelles as $it) {
            $em->remove($it);
        }
        $em->remove($intervention);
        $em->flush();
    }

    function getAllForCampagne($campagne){
        $query = $this->createQueryBuilder('p')
            ->where('p.campagne = :campagne')
            ->leftJoin('p.parcelles', 'parcelle_it')
            ->addSelect('parcelle_it')
            ->leftJoin('p.produits', 'produit_it')
            ->addSelect('produit_it')
            ->leftJoin('produit_it.produit', 'produit2')
            ->addSelect('produit2')
            ->setParameter('campagne', $campagne)
            ->orderBy('p.date', 'DESC')
            ->getQuery();

        return $query->getResult();
    }

    function getLast5ForCampagne($campagne){
        $query = $this->createQueryBuilder('p')
            ->where('p.campagne = :campagne')
            ->setParameter('campagne', $campagne)
            ->orderBy('p.date', 'DESC')
            ->setMaxResults(5)
            ->getQuery();

        return $query->getResult();
    }

    function updateSurface($intervention_id){
        $intervention = $this->findOneById($intervention_id);
        $intervention->surface = 0;
        foreach($intervention->parcelles as $p){
            $intervention->surface += $p->parcelle->surface;
        }
        $em = $this->getEntityManager();
        $em->persist($intervention);
        $em->flush();
    }

    function getAllForCompany($company){
        $query = $this->createQueryBuilder('p')
            ->where('p.company = :company')
            ->setParameter('company', $company)
            ->orderBy('p.date', 'DESC')
            ->getQuery();

        return $query->getResult();
    }


    function getAllForParcelle($parcelle){
        $em = $this->getEntityManager();
        $sql = 'SELECT intervention_id FROM intervention_parcelle where parcelle_id = ?';

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare($sql);
        $statement->bindValue(1, $parcelle->id);
        $statement->execute();
        $parcelles = $statement->fetchAll();
        $ids = [];
        foreach($parcelles as $p){
            $ids[] = $p["intervention_id"];

        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $this->createQueryBuilder('p')
            ->where('p.id IN (:ids)')
            ->setParameter('ids', $ids)
            ->orderBy('p.date', 'DESC')
            ->getQuery();

            return $query->getResult();
    }

    function getAllForProduit($produit){
        $em = $this->getEntityManager();
        $sql = 'SELECT intervention_id FROM intervention_produit where produit_id = ?';

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare($sql);
        $statement->bindValue(1, $produit->id);
        $statement->execute();
        $produits = $statement->fetchAll();
        $ids = [];
        foreach($produits as $p){
            $ids[] = $p["intervention_id"];

        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $this->createQueryBuilder('p')
            ->where('p.id IN (:ids)')
             ->setParameter('ids', $ids)
             ->orderBy('p.date', 'DESC')
             ->getQuery();

             return $query->getResult();
    }

    function getAllForMateriel($materiel){
        $em = $this->getEntityManager();
        $sql = 'SELECT intervention_id FROM intervention_materiel where materiel_id = ?';

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare($sql);
        $statement->bindValue(1, $materiel->id);
        $statement->execute();
        $produits = $statement->fetchAll();
        $ids = [];
        foreach($produits as $p){
            $ids[] = $p["intervention_id"];
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $this->createQueryBuilder('p')
            ->where('p.id IN (:ids)')
             ->setParameter('ids', $ids)
             ->orderBy('p.date', 'DESC')
             ->getQuery();

             return $query->getResult();
    }

    public function countByCompany(){

        $em = $this->getEntityManager();
        $statement = $em->getConnection()->prepare('SELECT c.company_id as company_id, count(*) as count FROM `intervention` p inner join campagne c  on c.id=p.campagne_id group by c.company_id');
        $statement->execute();

        return $statement->fetchAll();
    }
}
