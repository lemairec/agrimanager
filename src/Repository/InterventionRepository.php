<?php

namespace App\Repository;
use App\Entity\Intervention;
use App\Entity\InterventionParcelle;
use App\Entity\InterventionMateriel;
use App\Entity\InterventionProduit;
use App\Entity\InterventionRecolte;
use \DateTime;


/**
 * InterventionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InterventionRepository extends \Doctrine\ORM\EntityRepository
{
    public function my_clear($intervention)
    {
        $em = $this->getEntityManager();

        $parcelles = $em->getRepository(InterventionParcelle::class)->findByIntervention($intervention);
        foreach ($parcelles as $p) {
            $em->remove($p);
        }

		$materiel = $em->getRepository(InterventionMateriel::class)->findByIntervention($intervention);
		foreach ($materiel as $s) {
            $em->remove($s);

        }

        $produits = $em->getRepository(InterventionProduit::class)->findByIntervention($intervention);
        foreach ($produits as $p) {
            $em->remove($p);
        }

		/*$entrepreneur = $em->getRepository('InterventionEntrepreneur')->findByIntervention($intervention);
        foreach ($entrepreneur as $p) {
            $em->remove($p);
        }*/

		$recolte = $em->getRepository(InterventionRecolte::class)->findByIntervention($intervention);
        foreach ($recolte as $p) {
            $em->remove($p);
        }

        /*$stocks = $em->getRepository('ProduitStock')->findByIntervention($intervention);
        foreach ($stocks as $s) {
            $em->remove($s);
            $em->flush();
            $em->getRepository('Produit')->updateProduit($s->produit);
        }*/
        $em->flush();
    }

    /*public function save($intervention)
    {
        $em = $this->getEntityManager();

        $this->my_clear($intervention);
        $em->persist($intervention);
        $em->flush();
		foreach ($intervention->produits as $p) {
            $stock = new ProduitStock();
			$stock->date = $intervention->datetime;
			$stock->idSociete = $intervention->idSociete;
			$stock->produit = $p->produit;
			$stock->coutAchat = $p->cout;
			$stock->quantity = -$p->quantity;
			$stock->intervention = $intervention;

			$em->persist($stock);
			$em->flush();
			$em->getRepository('Produit')->updateProduit($p->produit);
		}
    }*/

    public function delete($intervention_id)
    {
        $em = $this->getEntityManager();

        $intervention = $this->find($intervention_id);

        $this->my_clear($intervention);
        $em->remove($intervention);
        $em->flush();
    }

    function getAllForCampagne($campagne){
        $query = $this->createQueryBuilder('p')
            ->where('p.campagne = :campagne')
            ->leftJoin('p.parcelles', 'parcelle_it')
            ->addSelect('parcelle_it')
            ->leftJoin('p.produits', 'produit_it')
            ->addSelect('produit_it')
            ->leftJoin('produit_it.produit', 'produit2')
            ->addSelect('produit2')
            ->setParameter('campagne', $campagne)
            ->orderBy('p.datetime', 'DESC')
            ->getQuery();

        return $query->getResult();
    }

    function getLast5ForCampagne($campagne){
        $query = $this->createQueryBuilder('p')
            ->where('p.campagne = :campagne')
            ->setParameter('campagne', $campagne)
            ->orderBy('p.datetime', 'DESC')
            ->setMaxResults(5)
            ->getQuery();

        return $query->getResult();
    }

    function updateSurface($intervention_id){
        $intervention = $this->findOneById($intervention_id);
        $intervention->surface = 0;
        foreach($intervention->parcelles as $p){
            $intervention->surface += $p->parcelle->surface;
        }
        $em = $this->getEntityManager();
        $em->persist($intervention);
        $em->flush();
    }

    function getAllForCompany($company){
        $query = $this->createQueryBuilder('p')
            ->where('p.company = :company')
            ->setParameter('company', $company)
            ->orderBy('p.datetime', 'DESC')
            ->getQuery();

        return $query->getResult();
    }


    function getAllForParcelle($parcelle, $order = "DESC"){

        $query = $this->createQueryBuilder('i')
            ->innerJoin('i.parcelles', 'p')
            ->select('i, it_pdt, pdt, r')
            ->leftJoin('i.produits', 'it_pdt')
            ->leftJoin('it_pdt.produit', 'pdt')
            ->leftJoin('i.recoltes', 'r')

            ->where('p.parcelle = :parcelle')
            ->setParameter('parcelle', $parcelle)
            ->orderBy('i.datetime', $order)
            ->getQuery();

        return $query->getResult();
    }

    function getAllForProduit($produit){
        $em = $this->getEntityManager();
        $sql = 'SELECT intervention_id FROM intervention_produit where produit_id = ?';

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare($sql);
        $statement->bindValue(1, $produit->id);
        $statement->execute();
        $produits = $statement->fetchAll();
        $ids = [];
        foreach($produits as $p){
            $ids[] = $p["intervention_id"];

        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $this->createQueryBuilder('p')
            ->where('p.id IN (:ids)')
             ->setParameter('ids', $ids)
             ->orderBy('p.datetime', 'DESC')
             ->getQuery();

             return $query->getResult();
    }

    function getAllForMateriel($materiel){
        $em = $this->getEntityManager();
        $sql = 'SELECT intervention_id FROM intervention_materiel where materiel_id = ?';

        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare($sql);
        $statement->bindValue(1, $materiel->id);
        $statement->execute();
        $produits = $statement->fetchAll();
        $ids = [];
        foreach($produits as $p){
            $ids[] = $p["intervention_id"];
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $this->createQueryBuilder('p')
            ->where('p.id IN (:ids)')
             ->setParameter('ids', $ids)
             ->orderBy('p.datetime', 'DESC')
             ->getQuery();

             return $query->getResult();
    }

    public function countByCompany(){

        $em = $this->getEntityManager();
        $statement = $em->getConnection()->prepare('SELECT c.company_id as company_id, count(*) as count FROM `intervention` p inner join campagne c  on c.id=p.campagne_id group by c.company_id');
        $result = $statement->executeQuery();

        return $ruleResult = $result->fetchAssociative();
    }
}
