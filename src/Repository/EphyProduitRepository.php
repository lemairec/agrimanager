<?php

namespace App\Repository;
use App\Entity\EphyProduit;
use App\Entity\EphySubstance;
use App\Entity\EphySubstanceProduit;
use App\Entity\EphyCommercialName;
use App\Entity\EphyUsage;

use Doctrine\Common\Collections\ArrayCollection;
/**
 * EphyProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

 function cmp($a, $b) {
     return $a['name'] - $b['name'];
 }

class EphyProduitRepository extends \Doctrine\ORM\EntityRepository
{
    /*function addRows($rows){
        $ephyproduit = new EphyProduit();
        $ephyproduit->amm = $rows[1];
        $ephyproduit->name = $rows[2];
        $ephyproduit->completeName = $ephyproduit->amm . ' - ' . $ephyproduit->name;
        $produitbdd = $this->findOneByCompleteName($ephyproduit->completeName);
        if($produitbdd == null){
            print(json_encode($rows)."\n");
            $em = $this->getEntityManager();
            $ephyproduit->society = $rows[4];
            $ephyproduit->unity = $rows[16];
            $em->persist($ephyproduit);
            $em->flush();
            if(strlen($rows[8])>10){
                $substances = explode(" | ", $rows[8]);
                foreach($substances as $s){
                    $pos1 = strpos($s, "(");
                    $pos2 = strpos($s, ")");
                    $name2 = substr($s, 0, $pos1-1);
                    $name = substr($s, $pos1+1, $pos2-$pos1-1);
                    $quantity = substr($s, $pos2+1);
                    $ephysubstance = $this->getEphySubstance($name);
                    $ephysubstanceproduit = new EphySubstanceProduit();
                    $ephysubstanceproduit->ephyproduit = $ephyproduit;
                    $ephysubstanceproduit->ephysubstance = $ephysubstance;
                    $ephysubstanceproduit->quantity = $quantity;
                    $ephysubstanceproduit->name2 = $name2;
                    $em->persist($ephysubstanceproduit);
                    $em->flush();
                }
            }




        } else {
        }
        return $ephyproduit;
    }*/

    function getEphySubstance($id, $name){
        $em = $this->getEntityManager();
        $ephysubstancerepository = $em->getRepository('App:EphySubstance');
        $ephysubstanceproduitrepository = $em->getRepository('App:EphySubstanceProduit');
        $ephysubstance = $ephysubstancerepository->findOneByName($name);
        if($ephysubstance){
            return $ephysubstance;
        }
        $ephysubstance = new EphySubstance();
        $ephysubstance->id = $id;
        $ephysubstance->name = $name;
        $em->persist($ephysubstance);
        $em->flush();
        return $ephysubstance;
    }

    function delete(){
        $em = $this->getEntityManager();
        $em->createQuery('DELETE FROM App:EphySubstanceProduit')->execute();
        $em->createQuery('DELETE FROM App:EphySubstance')->execute();
        $em->createQuery('DELETE FROM App:EphyCommercialName')->execute();
        $em->createQuery('DELETE FROM App:EphyProduit')->execute();
    }

    function xml(){
        $directory = "/Users/clementlemaire/workspace/agrimanager/data/decisionAMM_intrant_format_xml/";
        $files = ["decision_intrant_20170529_1496059873117.xml", "decision_intrant_20170529_1496061171121.xml", "decision_intrant_20170529_1496062364257.xml",
        "decision_intrant_20170529_1496063425675.xml", "decision_intrant_20170529_1496060207007.xml", "decision_intrant_20170529_1496061478517.xml",
        "decision_intrant_20170529_1496062621835.xml", "decision_intrant_20170529_1496063698899.xml", "decision_intrant_20170529_1496060536890.xml",
        "decision_intrant_20170529_1496061766697.xml", "decision_intrant_20170529_1496062884410.xml", "decision_intrant_20170529_1496063964369.xml",
        "decision_intrant_20170529_1496060865806.xml", "decision_intrant_20170529_1496062063393.xml", "decision_intrant_20170529_1496063152698.xml"];
        $this->delete();
        foreach($files as $file){
            $this->xml_file($directory.$file);
        }
    }

    function xml_file($file, $begin, $end){
        $em = $this->getEntityManager();
        $xml = simplexml_load_file($file);
        $ppps = $xml->{'intrants'}->{'PPPs'};
        $ephyCommercialNameRepository = $em->getRepository('App:EphyCommercialName');
        $ephyPhraseRisque = $em->getRepository('App:EphyPhraseRisque');
        $ephysubstanceproduitrepository= $em->getRepository('App:EphySubstanceProduit');
        $ephyusageproduitrepository= $em->getRepository('App:EphyUsage');

        $l = 0;
        foreach ($ppps->children() as $ppp) {
            $l = $l+1;
            if($l<$begin){
                continue;
            }
            if($l>$end){
                return;
            }
            //print_r($ppp);

            $em = $this->getEntityManager();
            $ephyproduit = new EphyProduit();
            $ephyproduit->amm = $ppp->{'numero-AMM'};
            $produitbdd = $this->find($ephyproduit->amm);
            if($produitbdd != null){
                $ephyproduit = $produitbdd;
                //continue;
            }

            $ephyproduit->name = trim($ppp->{'nom-produit'});
            $ephyproduit->society = $ppp->{'titulaire'};
            $ephyproduit->typeCommercial = $ppp->{'type-commercial'};
            $ephyproduit->gammeUsage = $ppp->{'gamme-usage'};
            $ephyproduit->enable = true;
            if($ppp->{'etat-produit'} != "AUTORISE"){
                $ephyproduit->enable = false;
            }
            $ephyproduit->fonctions = "";
            if(isset($ppp->{'fonctions'})){
                foreach ($ppp->{'fonctions'}->children() as $fonction) {
                    if(strlen($ephyproduit->fonctions)>0){
                        $ephyproduit->fonctions = $ephyproduit->fonctions.";";
                    }
                    $ephyproduit->fonctions = $ephyproduit->fonctions.$fonction;
                }
            }

            print($l." ".$ephyproduit->name."\n");


            if(isset($ppp->{'composition-integrale'}->{'substances-actives'})) {
                foreach ($ppp->{'composition-integrale'}->{'substances-actives'}->children() as $substance) {
                    if(isset($substance->{'teneur-SA-pure'})){
                        $ephysubstanceproduitunity = $substance->{'teneur-SA-pure'}->attributes()['unite'];
                        $i = strpos($ephysubstanceproduitunity, '/');
                        if($i !== false){
                            $ephyproduit->unity = substr($ephysubstanceproduitunity, $i+1);
                        }
                    }
                }
            }



            $ephyproduit->phraseRisques = new ArrayCollection();
            if(isset($ppp->{'classement-CLP'}->{'phrases-risque'})) {
                foreach ($ppp->{'classement-CLP'}->{'phrases-risque'}->children() as $phraseRisque) {
                    $name = $phraseRisque->attributes()['lib-court'];
                    $description = $phraseRisque;
                    $ephyproduit->addPhraseRisque($ephyPhraseRisque->get($name, $description));
                }
            }
            if(isset($ppp->{'classement-DSD'}->{'phrases-risque'})) {
                foreach ($ppp->{'classement-DSD'}->{'phrases-risque'}->children() as $phraseRisque) {
                    $name = $phraseRisque->attributes()['lib-court'];
                    $description = $phraseRisque;
                    $ephyproduit->addPhraseRisque($ephyPhraseRisque->get($name, $description));

                }
            }

            $em->persist($ephyproduit);
            $em->flush();

            $ephysubstanceproduitrepository->deleteForEphyProduit($ephyproduit);
            if(isset($ppp->{'composition-integrale'}->{'substances-actives'})) {
                foreach ($ppp->{'composition-integrale'}->{'substances-actives'}->children() as $substance) {
                    //print_r($substance);
                    $substance_name = "".$substance->{'substance'};
                    $substance_id = "".$substance->{'substance'}->attributes()['ref-id'];
                    $ephysubstance = $this->getEphySubstance($substance_id, $substance_name);
                    $ephysubstanceproduit = new EphySubstanceProduit();
                    $ephysubstanceproduit->ephyproduit = $ephyproduit;
                    $ephysubstanceproduit->ephysubstance = $ephysubstance;
                    if(isset($substance->{'teneur-SA-pure'})){
                        $ephysubstanceproduit->quantity = $substance->{'teneur-SA-pure'};
                        $ephysubstanceproduit->unity = $substance->{'teneur-SA-pure'}->attributes()['unite'];
                    } else {
                        $ephysubstanceproduit->quantity = 0;
                        $ephysubstanceproduit->unity = 'NA';
                    }
                    $em->persist($ephysubstanceproduit);

                }
            }

            $ephyusageproduitrepository->deleteForEphyProduit($ephyproduit);
            if(isset($ppp->{'usages'})) {
                foreach ($ppp->{'usages'}->children() as $usage) {
                    //print("\n####usage".$usage);
                    $identifiant_usage = $usage->{'identifiant-usage'};
                    $dose_retenue = $usage->{'dose-retenue'};
                    $etat_usage = $usage->{'etat-usage'};
                    $dar = null;
                    if(isset($usage->{'delai-avant-recolte-jour'})){
                        $dar = $usage->{'delai-avant-recolte-jour'};
                    }
                    $dose_retenue_unity = "";
                    if(isset($usage->{'dose-retenue'})){
                        $dose_retenue_unity = $usage->{'dose-retenue'}->attributes()['unite'];
                    } else {
                        $dose_retenue = null;
                    }

                    $u = new EphyUsage();
                    $u->id = intval($usage->{'id'});
                    $u->ephyProduit = $ephyproduit;
                    $u->identifiantUsage = $identifiant_usage;
                    $u->doseRetenu = $dose_retenue;
                    $u->etatUsage = $etat_usage;
                    $u->dar = $dar;
                    $u->doseRetenuUnity = $dose_retenue_unity;
                    $u->conditionEmploi = $usage->{'condition-emploi'};;
                    $em->persist($u);
                    //print($identifiant_usage);
                    //print_r($usage);
                    //print("####\n");
                    //$name = $phraseRisque->attributes()['lib-court'];
                    //$description = $phraseRisque;
                    //->addPhraseRisque($ephyPhraseRisque->get($name, $description));

                }
            }

            if(isset($ppp->{'autres-noms'})) {
                foreach ($ppp->{'autres-noms'}->children() as $autreNom) {
                    $name = trim($autreNom->{'nom'});
                    $ephyCommercialName = new EphyCommercialName();
                    $ephyCommercialName->name = $name;
                    $ephyCommercialName->ephyproduit = $ephyproduit;
                    $ephyCommercialName->completeName = $ephyproduit->amm . ' - ' . $name . ' ('. $ephyproduit->unity.')';
                    $ephyCommercialNameRepository->save($ephyCommercialName);
                }
            }
            $em->flush();

        }

    }

    function csv(){
        $em = $this->getEntityManager();
        $ephyrepository = $em->getRepository('App:EphyProduit');
        $fileName = '/Users/lemairec/fablab/symfony_agri/data/usages_des_produits_autorises_v2_utf8_04052017.csv';
        if (($handle = fopen($fileName, "r")) !== FALSE) {
            echo("toto");
            $i = -1;
            $this->delete();
            while (($rows = fgetcsv($handle, null, ";")) !== FALSE) {
                $i += 1;
                if ($i == 0) { continue; }
                $ephyrepository->addRows($rows);
                //if($i > 1000){ return; };
            }
        }
    }

    function getAllActive(){
        return $this->findByEnable(true);
    }


    //$stmt = $em->getConnection()->prepare("SELECT amm, name from ephy_produit union SELECT ephyproduit as amm, name from ephy_commercial_name order by name", $rsm);
    //$stmt->execute();
    //$res = $stmt->fetchAll();
    function getWithCommercialesNamesApi($all){
        $em = $this->getEntityManager();
        $query1 = $this->createQueryBuilder('p');
        $query2 = $em->getRepository('App:EphyCommercialName')->createQueryBuilder('c')->join('c.ephyproduit','p');

        if(!$all){
            $query1 = $query1->where('p.enable = true');
            $query2 = $query2->where('p.enable = true');
        }

        $produits = $query1->getQuery()->getResult();
        $commercials = $query2->getQuery()->getResult();

        //SELECT amm, name from ephy_produit union SELECT ephyproduit as amm, name from ephy_commercial_name order by name

        $data = [];
        foreach ($produits as $r) {
            $data[] = ["name" => $r->name , "amm" => $r->getAmm()];
        }
        foreach ($commercials as $r) {
            $data[] = ["name" => $r->name , "amm" => $r->getAmm()];
        }

        return ["data"=>$data];

    }
    function getAllActiveWithCommercialesNames(){
        $em = $this->getEntityManager();

        $produits = $this->getAllActive();

        $commercial = $em->getRepository('App:EphyCommercialName')->createQueryBuilder('c')
            ->join('c.ephyproduit','p')
            ->where('p.enable = true')
            ->getQuery()->getResult();

        $res = [];
        foreach($commercial as $c){
            $res[] = $c;
        }

        foreach($produits as $c){
            $res[] = $c;
        }



        usort($res, function($a, $b) { // anonymous function
            return strcmp($a->name,$b->name);
        });


        return $res;
    }

    function getAllWithCommercialesNames(){

        $em = $this->getEntityManager();

        $produits = $this->findAll();
        $commercial = $em->getRepository('App:EphyCommercialName')->findAll();

        $res = [];
        foreach($commercial as $c){
            $res[] = $c;
        }

        foreach($produits as $c){
            $res[] = $c;
        }



        usort($res, function($a, $b) { // anonymous function
            return strcmp($a->name,$b->name);
        });


        return $res;
    }
}
